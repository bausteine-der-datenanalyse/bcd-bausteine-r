---
title: "Untersuchung einzelner Merkmale in R"
---

```{r}
#| echo: false
library(tidyverse)
library(kableExtra)
load("daten/einzelne-merkmale.Rdata")
```

## Dataframes für diese Folien

<br/>

| Name                | Inhalt                                           |
|---------------------|--------------------------------------------------|
| d_wb_all            | Weltbank - Alle Länder, alle Jahre               |
| d_wb_2012           | Wie `d_wb_all`, aber nur für das Jahr 2012       |
| d_wb_countries      | Wie `d_wb_all`, aber nur Ausgewählte Länder      |
| d_wb_countries_2012 | Wie `d_wb_countries`, aber nur für das Jahr 2012 |
| d_ns_bochum_tag     | Tageswerte für Niederschläge in Bochum           |
| d_ns_bochum_monat   | Monatswerte für Niederschläge in Bochum          |

<br/> <br/>

Quellen: https://data.worldbank.org und https://www.dwd.de

# 1. Werte plotten mit `geom_col()`

Wenn die Werte vorliegen

## Beispieldatensatz

::::: columns
::: {.column width="65%"}
```{r}
d <- tibble(
  A = c("X", "Y", "X", "Z", "Z", "X"), 
  B = c(1.5, 5.0, 4.5, 2.0, 1.0, 2.0),
  C = c("u", "v", "v", "u", "v", "v")
)
```
:::

::: {.column width="35%"}
```{r}
show(d)
```
:::
:::::

- Mit `tibble` auf die Schnelle einen Dataframe erzeugen
- Werte für ein Merkmal mit `c(...)` kombinieren
- Zeichenketten in Hochkommata eingeben (ob `"so"` oder `'so'` ist egal)
- Mit `<-` wird der Dataframe der Variablen `d` zugewiesen

## Minimalbeispiel

```{r}
ggplot(data = d) + geom_col(mapping = aes(x = A, y = B))
```

- Höhe der Säule aus **Summe** der Werte von Merkmal B

## Füllfarbe nach drittem Merkmal

```{r}
ggplot(data = d) + geom_col(mapping = aes(x = A, y = B, fill = C))
```

- Mit `fill = <M>` Merkmal für Füllfarbe angeben

## Als Balkendiagramm

```{r}
ggplot(data = d) + geom_col(mapping = aes(x = A, y = B, fill = C)) +
  coord_flip()
```

- Mit `coord_flip()` Koordinatenachsen vertauschen

## Mit *echten* Daten...

## Treibhausgasemissionen (2012)

```{r}
ggplot(data=d_wb_countries_2012) + 
  geom_col(mapping = aes(x = country, y = gge))
```

- Zur Erinnerung: `gge` steht für Greenhouse Gas Emissions

## Treibhausgasemissionen bunt (2012)

```{r}
ggplot(data=d_wb_countries_2012) + 
  geom_col(mapping = aes(x = country, y = gge, fill = region))
```

- Nach Weltregion eingefärbt

## Treibhausgasemissionen pro Kopf (2012)

```{r}
ggplot(data=d_wb_countries_2012) + 
  geom_col(mapping = aes(x = country, y = gge / pop, fill = region))
```

- Rechnen mit Merkmalen: `y = gge / pop`

## Treibhausgasemissionen über die Zeit

```{r}
ggplot(data = d_wb_countries) +
  geom_col(mapping = aes(x = year, y = gge, fill = country))
```

- Jahreszahl für x-Achse

## Treibhausgasemissionen über die Zeit pro Kopf 

```{r}
ggplot(data = d_wb_countries) +
  geom_col(mapping = aes(x = year, y = gge / pop, fill = country))
```

- Rechnen mit Merkmalen: `y = gge / pop`

## Treibhausgasemissionen anteilig

```{r}
ggplot(data = d_wb_countries) +
  geom_col(mapping = aes(x = year, y = gge, fill = country), position = "fill")
```

- Selbe Höhe für alle Balken mit `position="fill"` $\rightarrow$ Anteile ablesbar

## Ring- und Kreisdiagramme...

## 1. Schritt: Eine Säule mit Füllfarbe

```{r}
ggplot(data = d_wb_countries_2012) + 
  geom_col(mapping = aes(x = 0, y = pop, fill = country))
```

- x-Wert fest vorgegeben, Höhe nach Merkmal B, Füllfarbe nach Merkmal A

## 2. Schritt: Bereich auf der x-Achse

```{r}
ggplot(data = d_wb_countries_2012) + geom_col(mapping = aes(x = 0, y = pop, fill = country)) +
  scale_x_continuous(limits = c(-1.5, 0.5))
```

- Skalen besprechen wir noch ausführlicher

## 3. Schritt: Koordinatentransformation

```{r}
ggplot(data = d_wb_countries_2012) + geom_col(mapping = aes(x = 0, y = pop, fill = country)) +
  scale_x_continuous(limits = c(-1.5, 0.5)) + coord_polar(theta = "y")
```

- y-Koordinate wird für den Winkel verwendet

## Kreisdiagramm

```{r}
ggplot(data = d_wb_countries_2012) + geom_col(mapping = aes(x = 0, y = pop, fill = country)) +
  coord_polar(theta = "y")
```

- Wie Ringdiagramm, aber kein Bereich für x-Werte vorgeben

# 2. Häufigkeitsverteilungen mit `geom_bar()`

Wie `geom_col()` aber mit Zählung

## Beispieldatensatz

```{r}
d <- tibble(farbe = c("rot", "gruen", "blau", "gruen", "rot", "gruen"))

show(d)
```

## Minimalbeispiel

```{r}
ggplot(data = d) + geom_bar(mapping = aes(x = farbe))
```

- Wie funktioniert das? Mit einer statistischen Transformation!

## Statistische Transformation

![](bilder/geom_bar_transformation.svg)

### Funktionsweise

- Daten werden vor dem Plotten transformiert
- Dabei wird eine neue Tabelle erzeugt
- Voreingestellte statistische Transformation für `geom_bar`: Zählen
- Transformierte Daten werden geplottet

## Mit *echten* Daten...

## Anzahl der Länder pro Region

```{r}
ggplot(data = d_wb_2012) + geom_bar(mapping = aes(x = region))
```

- Funktioniert, weil jedes Land genau einmal in Dataframe

## Anzahl der Länder pro Region

```{r}
ggplot(data = d_wb_2012) + geom_bar(mapping = aes(x = region, fill = region))
```

- Balken nach Region eingefärbt (redundant mit Achsenbeschriftung)

# 3. Histogramme mit `geom_histogram()`

## Beispieldatensatz

```{r, fig.height = 2}
d <- tibble(X = c(0, 0.5, 0.6, 0.8, 1.3, 1.4, 1.5, 1.6, 1.9, 2.5, 2.6, 2.7))

ggplot(data = d) + geom_point(mapping = aes(x = X), y = 0, color = 'red')
```

- Punkte plotten mit `geom_point` (später ausführlich)
- Vorgegebene Eigenschaften (`y` und `color`) **nach** Aesthetics

## Minimalbeispiel

```{r}
ggplot(data = d) + 
  geom_histogram(mapping = aes(x = X)) +
  geom_point(mapping = aes(x = X), y = 0, color = 'red')
```

## Hilfetext zu geom_histogram

![Aus der Dokumentation zu geom_histogram](bilder/geom_histogram_doc.png)

## Mit Klassenbreite

```{r}
ggplot(data = d) + 
  geom_histogram(mapping = aes(x = X), binwidth = 0.5) +
  geom_point(mapping = aes(x = X), y = 0, color = 'red')
```

## Mit Klassenbreite und Position

```{r}
ggplot(data = d) + 
  geom_histogram(mapping = aes(x = X), binwidth = 0.5, boundary = 0) +
  geom_point(mapping = aes(x = X), y = 0, color = 'red')
```

## Rechtsoffene Intervalle

```{r}
ggplot(data = d) + 
  geom_histogram(mapping = aes(x = X), binwidth = 0.5, boundary = 0, closed = "left") +
  geom_point(mapping = aes(x = X), y = 0, color = 'red')
```

## Histogramm mit relativen Häufigkeiten

```{r}
ggplot(data = d) + 
  geom_histogram(mapping = aes(x = X, y = stat(density)), binwidth=0.5) +
  geom_point(mapping = aes(x = X), y = 0, color = 'red')
```

## Unterschiedliche Klassengrößen

```{r}
ggplot(data = d) + 
  geom_histogram(mapping = aes(x = X,y = stat(density)), breaks = c(0, 1, 1.5, 1.75, 4)) +
  geom_point(mapping = aes(x = X), y = 0, color = 'red')
```

- Klassen mit `breaks = c(c0, c1, ..., ck)`, Fläche der Rechtecke in Summe gleich 1

## Mit *echten* Daten...

## Niederschläge (Tag) in Bochum

```{r}
ggplot(data = d_ns_bochum_tag) + 
  geom_histogram(mapping = aes(x = Niederschlag), binwidth = 0.5, boundary = 0)
```

## Niederschläge (Monat) in Bochum

```{r}
ggplot(data = d_ns_bochum_monat) + 
  geom_histogram(mapping = aes(x = Niederschlag), binwidth = 15, boundary = 0)
```

- Klassenbreite mit `binwidth = w`, Klassengrenze mit `boundary = b`

## Niederschläge (Monat) in Bochum

```{r}
ggplot(data = d_ns_bochum_monat) + 
  geom_histogram(mapping = aes(x = Niederschlag, y = stat(density)), binwidth = 15, boundary = 0)
```

- Relative Häufigkeiten mit `y=stat(density)`

## Niederschläge (Monat) in Bochum

```{r}
ggplot(data = d_ns_bochum_monat) + 
  geom_histogram(mapping = aes(x = Niederschlag, fill = Monat), binwidth = 15, boundary = 0)
```

- Nach Monaten eingefärbt

# 4. Verteilungsfunktionen mit `geom_step()` und Transformation

## Minimalbeispiel `geom_step()`

```{r}
  ggplot(data = tibble(X = c(0, 1, 3), Y = c(2, 1, 3))) +
    geom_step(mapping = aes(x = X, y = Y)) +
    geom_point(mapping = aes(x = X, y = Y), color = 'red')
```

## Beispieldaten

```{r}
d <- tibble(
  X = c(0.1, 0.3, 0.2, 0.6, 0.3, 0.9, 1.2, 0.3, 0.6, 0.3),
  Y = c("a", "b", "a", "a", "b", "b", "a", "b", "a", "b")
)

ggplot(data = d) + geom_bar(mapping = aes(x = X))
```

## Empirische Verteilungsfunktion

```{r}
ggplot(data = d) + geom_step(mapping = aes(x = X), stat = "ecdf")
```

- Statistische Transformation mit `stat = "ecdf"` angeben
- `ecdf` = *Empirical Cumulative Densitiy Function*

## Empirische Verteilungsfunktion getrennt

```{r}
ggplot(data = d) + 
  geom_step(mapping = aes(x = X, color = Y), stat = "ecdf")
```

- Zwei Kurven entsprechend Werten von Merkmal `Y`

## Absolute kumulierte Häufigkeitsverteilung

```{r}
ggplot(data = d) + 
  geom_step(mapping = aes(x = X, y = nrow(d) * stat(y)), stat = "ecdf")
```

- In ggplot nicht vorgesehen und daher kompliziert
- Besser: Werte selber berechnen (später)

## Mit *echten* Daten...

## Monatliche Niederschläge

```{r}
ggplot(data = d_ns_bochum_monat) +
  geom_step(mapping = aes(x = Niederschlag), stat = "ecdf")
```

## Tägliche Niederschläge

```{r}
ggplot(data = d_ns_bochum_tag) +
  geom_step(mapping = aes(x = Niederschlag), stat = "ecdf")
```

- Warum ist die Charakteristik völlig anders als für die monatlichen Niederschläge?
- An wie vielen Tagen fällt kein Regen?

# 5. Zusammenfassung

## Werte darstellen mit `geom_col()`

```{r}
#| eval: false
ggplot(data = d) +
  geom_col(mapping = aes(x = <M>, y = <M>, fill = <M>, color = <M>), Argumente)
```

<br/>

| AES   | Beschreibung                | Optional |
|-------|-----------------------------|----------|
| x     | Merkmal für x-Position      | Nein     |
| y     | Merkmal für Höhe der Balken | Nein     |
| fill  | Merkmal für Füllfarbe       | Ja       |
| color | Merkmal für Linienfarbe     | Ja       |

<br/>

| Argument | Beschreibung                            |
|----------|-----------------------------------------|
| position | Gesamte y-Achse mit `position = "fill"` |

## Zählen und darstellen mit `geom_bar()`

```{r}
#| eval: false
ggplot(data = d) +
  geom_bar(mapping = aes(x = <M>, fill = <M>, color = <M>), Argumente)
```

<br/>

| AES   | Beschreibung                       | Optional |
|-------|------------------------------------|----------|
| x     | Merkmal für x-Achse (wird gezählt) | Nein     |
| fill  | Füllfarbe                          | Ja       |
| color | Linienfarbe                        | Ja       |

<br/>

| Argument | Beschreibung                            |
|----------|-----------------------------------------|
| position | Gesamte y-Achse mit `position = "fill"` |

- Wie `geom_col` aber ohne y

## Histogramme mit `geom_histogram()`

```{r}
#| eval: false
ggplot(data = d) +
  geom_histogram(mapping=aes(x=<M>,y=stat(density),fill=<M>), Argumente)
```

<br/>

| AES  | Beschreibung                                 | Optional |
|------|----------------------------------------------|----------|
| x    | Merkmal, das gezählt werden soll             | Nein     |
| y    | Relative Häufigkeiten mit `y=stat(density))` | Ja       |
| fill | Merkmal für Füllfarbe                        |          |

<br/>

| Argument | Beschreibung                                                |
|----------|-------------------------------------------------------------|
| bins     | Anzahl der Klassen                                          |
| binwidth | Klassenbreite                                               |
| center   | Mitte einer Klasse                                          |
| boundary | Grenze zwischen zwei Klassen                                |
| breaks   | Klassengrenzen                                              |
| closed   | Klassen links- oder recht geschlossen ("left" oder "right") |

## Empirische Verteilungsfunktion mit `geom_step()` und `stat="ecdf"`

```{r}
#| eval: false
ggplot(data = d) +
  geom_step(mapping = aes(x = <M>, color = <M>), stat = "ecdf")
```

<br/>

| AES   | Beschreibung                               | Optional |
|-------|--------------------------------------------|----------|
| x     | Merkmal für empirische Verteilungsfunktion | Nein     |
| color | Merkmal für Farbe                          | Ja       |