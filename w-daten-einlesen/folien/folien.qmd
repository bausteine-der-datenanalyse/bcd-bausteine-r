---
title: "Daten einlesen"
---

```{r}
#| echo: false
#| message: false
library(tidyverse)
library(kableExtra)
```

# Tidyverse

## Tidyverse

[]{.down40}

![](bilder/tidyverse.svg)

[]{.down40}

- Sammlung von Bibliotheken für Data-Science in R
- Durchgängige Designphilosophie und Datenstrukturen
- Viele Dinge leichter und eleganter zu erledigen als in 'reinem' R
- Ursprünglich von Hadley Wickham, heute viele Entwickler
- Einführung vom Autor auf [Youtube](https://youtu.be/MjHQo-t2v_c) (englisch)

# Excel-Dateien lesen

## Funktion `read_excel(...)`

Paket laden

```{r}
library(readxl)
```

Tabelle einlesen

```{.r}
d <- read_excel(Dateiname, Parameter...)
```

Die wichtigsten Parameter

Parameter       | Bedeutung                                   | Optional
----------------|---------------------------------------------|---------
skip = 5        | Anzahl zeilen, die überlesen werden sollten | Ja
range = "B2:G5" | Einzulesender Bereich (ersetzt `skip`)      | Ja
sheet = "Name"  | Tabellenblatt, das gelesen werden soll      | Ja

: {tbl-colwidths="[20,50,30]"}

## Beispiel 1: Einfache Tabelle {.smaller}

::: {layout-ncol=2}

![](bilder/tabelle.svg)

```{r}
d<-read_excel("daten/tabelle.xlsx")
kable(d)
```
:::

- `read_excel(...)` liest Excel-Datei und gibt Dataframe zurück
- Im einfachsten Fall nur Datei angeben, Inhalt von erstem Sheet
- Datum wird manchmal korrekt als date-time eingelesen

## Leider nicht immer so einfach

![](bilder/excel-screenshot.svg)

Wo liegt das Problem?

- Es soll bestimmtes Tabellenblatt gelesen werden
- Bereiche links und oben sollen ignoriert werden

→ Importassistent!

## Importassistent 1/3

![](bilder/importassistent-1.svg)

## Importassistent 2/3

![](bilder/importassistent-2.svg)

## Importassistent 3/3

```{r}
d<-read_excel("daten/unistrasse-2017.xlsx",sheet="raw(T)",range="B2:H20712")
d
```

- Einstellung in Excel unvollständig, daher Datum nicht richtig gelesen
- Anmerkung: Große Dataframes nicht mit `kable` ausgeben

# CSV-Dateien einlesen

## Aufbau und Inhalt von CSV-Dateien

![](bilder/csv.svg)

- Comma Separated Values, weit verbreitet, nicht standardisiert
- Häufig Kopfzeile(n) mit Beschreibung des Inhalts
- Inhalt in der Regel mit
  1. Datenfeldern getrennt z.B. durch Komma, Semikolon, Leerzeichen...
  1. Datum in verschiedensten Formaten
  1. Zahlen mit oder ohne Dezimaltrenner (Punkt oder Komma)
  1. Spezielle Kennzeichnung von fehlenden Werten

## Amerikanische Konvention {.smaller}

Datei `beispiel-1.csv`

```{}
{{< include daten/beispiel-1.csv >}}
```

- Einträge durch "`,`" getrennt, Dezimaltrenner ist "`.`"
- Datum mit Jahr/Monat/Tag

Einlesen mit `read_csv(...)`

```{r}
#| message: false
read_csv("daten/beispiel-1.csv")
```

- Datum wird erkannt

## Deutsche Konvention {.smaller}

Datei `beispiel-2.csv`

```{}
{{< include daten/beispiel-2.csv >}}
```

- Einträge durch "`;`" getrennt, Dezimaltrenner ist "`,`", Tausender mit "`.`" 
- Datum mit Tag/Monat/Jahr

Einlesen mit `read_csv2(...)`

```{r message=FALSE}
read_csv2("daten/beispiel-2.csv")
```

- Datum wird nicht erkannt

## Gemischte Konvention {.smaller}

```{}
{{< include daten/beispiel-3.csv >}}
```

- Einträge durch "`;`" getrennt, Dezimaltrenner ist "`.`", Tausender mit "`,`" 
- Datum mit Tag/Monat/Jahr

Einlesen mit `read_delim(...)`, 

```{r}
read_delim("daten/beispiel-3.csv", delim=";", trim_ws=TRUE, locale=locale(decimal_mark=".", grouping_mark=","))
```

- `locale` enthält länderspezifische Einstellungen
- `trim_ws` entfernt Leerzeichen (wichtig!)
- Datum wird nicht erkannt

## Beispiel: Niederschlagsdaten Bochum

```{r message=FALSE}
read_delim(
  "daten/produkt_nieder_monat_18910101_20171231_00555.txt",
  delim = ";", , trim_ws=TRUE,
  locale = locale(decimal_mark = ".", grouping_mark = ",")
)
```

# Rohdaten

## Hände weg von den Rohdaten! {.smaller}

![](bilder/haende-weg.svg)

:::: {.columns}
::: {.column width=50%}
**Rohdaten dürfen nicht verändert werden**

- 'Von Hand' durchgeführte Änderungen sind später nicht mehr nachvollziehbar
- Änderungen nur schwer einzeln rückgängig zu machen
:::
::: {.column width=50%}
**Statdessen: Rohdaten einlesen und in R aufbereiten**

- R-Code dokumentiert was verändert wurde
- Wird bei der Benotung berücksichtigt
:::
::::

## Beim Einlesen von Daten gilt immer

[]{.down120}

- Vorsicht: Eingelesene Daten sehr sorgfältig anschauen!
- Überblick verschaffen mit `summary(d)` und/oder `str(d)`

