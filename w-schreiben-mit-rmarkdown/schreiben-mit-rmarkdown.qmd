---
title: "Schreiben mit R Markdown"
author: "Matthias Baitsch, Florian Bagemihl"
date: "13. Januar 2024"
date-format: long
format: 
  html: 
    toc: true
    number-sections: true
  pdf:
    toc: true
    number-sections: true
    include-in-header: style.sty
    documentclass: scrreprt
    classoption: a4paper,numbers=noenddot,parskip=half+,twoside=off
  docx: 
    toc: true
    reference_doc: style.docx
lang: de-DE
fontsize: 12pt
bibliography: bibliographie.bib
---

```{r setup, include=FALSE}
library(knitr)
library(readxl)
library(tidyverse)
opts_chunk$set(echo = FALSE)
opts_chunk$set(fig.align = 'center')
chunk <- "```"
inline <- function(x = "") paste0("`` `r ", x, "` ``")
```

# Einführung

Dieser Text ist eine kurze Einführung in das Schreiben von wissenschaftlichen Dokumenten mit R Markdown. 

**Mit R Markdown können Sie:**

* Text und R-Programmcode zu mischen.
* Aus einer R Markdown Datei Dokumente in verschiedenen Formaten (PDF, HTML, Word) erstellen.
* Mathematische Formeln in LaTeX-Schreibweise einzugeben.
* Automatisch ein Literatur- und Inhaltsverzeichnis zu erstellen.

**Mit R Markdown können Sie nicht:**

* Aus einer R Markdown Datei einen Bericht *und* Folien erstellen. Die Struktur der Dokumente ist völlig unterschiedlich.

**Dokumentation**

* Das Buch zu Bookdown: <https://bookdown.org/yihui/rmarkdown/>

**Ausgabeformate**

Mit dem Render-Button in RStudio erzeugen Sie aus ihrer QMD-Datei ein Dokument in verschiedenen möglichen Formaten. Um das Format auszuwählen klicken Sie auf das kleine schwarze Dreieck.

**HTML**: Die generierten HTML-Dokumente können in einem Webbrowser betrachtet werden.

**PDF**: Dokumente im PDF-Format werden aus R Markdown Dateien mithilfe des Textsatzsystems LaTeX erzeugt. Damit das funktioniert, muss LaTeX auf dem Computer installiert sein. 

* Windows: <https://miktex.org>
* Mac: <http://www.tug.org/mactex/>
* Linux: LaTeX mit Paketmanager installieren

**Microsoft Word**: Darüber hinaus können Word-Dokumente erzeugt werden. Die Formatierung des Dokuments lässt sich mit einer eigenen Word-Vorlage anpassen. Diese Vorgehensweise wird nicht empfohlen (von Matthias Baitsch).

**Empfohlene Arbeitsweise**: Am besten sehen die PDF-Dokumente aus. Verwenden Sie jedoch während des Schreibens das HTML-Format um schnell zu überprüfen, ob alles in etwa so aussieht, wie Sie das möchten. Am Ende werden Sie dann noch einige Nachbesserungen benötigen, um die PDF-Ausgabe gut hinzubekommen. 

# Aufbau der Eingabedatei

Eine Quarto Markdown Eingabedatei besitzt die Endung .Qmd und besitzt den folgenden Aufbau: 

1. YAML-Header
1. R-Setup
1. Inhalt

## YAML-Header

Ganz zu Beginn der Datei steht zwischen `---` und `---` der so genannte YAML-Header der Datei (YAML heißt die Auszeichnungssprache des Headers, aber das ist für uns nicht wichtig). Hier werden einige grundlegende Einstellungen zum Dokument festgelegt. Sie könnnen für ihre Arbeit diesen Header als Grundlage verwenden:

```yaml
---
title: "Schreiben mit R Markdown"
author: "Matthias Baitsch, Florian Bagemihl"
date: "13. Januar 2024"
date-format: long
format: 
  html: 
    toc: true
    number-sections: true
  pdf:
    toc: true
    number-sections: true
    include-in-header: style.sty
    documentclass: scrreprt
    classoption: a4paper,numbers=noenddot,parskip=half+,twoside=off
  docx: 
    toc: true
    reference_doc: style.docx
lang: de-DE
fontsize: 12pt
bibliography: bibliographie.bib
---
```

In dem Header stehen Titel, Autor/Autoren, das Datum und die Dokumentensprache. Falls Sie eine Bibliographie verwenden wollen, dann geben Sie die Datei `bibliographie.bib` hier an (mehr dazu weiter unten). Als Ausgabeformate sind hier HTML, PDF und Word  konfiguriert. Dabei steht `toc: true` dafür, dass ein Inhaltsverzeichnis eingefügt wird (toc = *Table of Contents*) und `number_sections: true` für nummerierte Abschnitte. Bei der Verwendung von Word kann die Formatierung mithilfe des Dokuments `style.docx` angepasst werden (Formatvorlagen). Für die PDF-Ausgabe lassen sich Einstellungen in der Datei `style.sty` vornehmen (zum Beispiel Pakete laden).

## R-Setup

In dem Setup-Abschnitt

    `r chunk`{r setup, include=FALSE}
    library(knitr)
    library(readxl)
    library(tidyverse)
    opts_chunk$set(echo = FALSE)
    opts_chunk$set(fig.align = 'center')
    `r chunk`

werden die notwendigen Bibliotheken geladen. Die Anweisung `opts_chunk$set(echo = FALSE)` konfiguriert `knitr` so, dass R-Code-Blöcke standardmäßig nicht mit ausgeben werden (dazu unten mehr), die Zeile `opts_chunk$set(fig.align = 'center')` sorgt dafür, dass Graphiken zentriert angeordnet werden. 

Warum soll der R-Code nicht ausgegeben werden? Für das Verständnis ihrer statistischen Auswertungen ist der R-Code nicht notwendig. Die Programmierung lässt sich sehr gut anhand der Qmd-Datei nachvollziehen. Für besonders wichtigen R-Code kann man immer noch explizit angeben, dass der Code angezeigt werden soll (siehe unten).

## Eigener Text

Den weitaus größten Teil des Dokuments nimmt ihr eigener Text mit den statistischen Berechnungen und Auswertungen ein. Geschrieben wird in der R Markdown Auszeichnungssprache, einer Variante von Markdown (<https://de.wikipedia.org/wiki/Markdown>). Es handelt sich bei R Markdown um eine einfache Sprache zur Erstellung von Dokumenten aus einer Kombination von eigenem Text und R-Programmcode. Die Elemente der Sprache werden im folgenden Abschnitt erklärt.

# Elemente von R Markdown

## Text

### Gliederung

Abschnittsüberschriften werden durch vorangestellte Hash-Zeichen markiert.

```markdown
# Überschrift erste Gliederungsebene

## Überschrift zweite Gliederungsebene

### Überschrift dritte Gliederungsebene
```

Soll der Abschnitt nicht nummeriert werden, dann kommt ein `{-}` an das Ende der Zeile.

### Formatierung

Text wird *kursiv* gesetzt, wenn die Zeichen wie in `*text*` zwischen Sternchen gesetzt werden. **Fettdruck** erhält man mit zwei Sternchen, also `**text**` und ***Fett-Kursiv*** mit `***text***`. Ein Paar von Tilden (`~`) stellen Zeichen tief (`H~2~O` ergibt H~2~O), entsprechend erzeugt ein Paar von Caret-Zeichen (`^`) hochgestellten Text (`Cu^2+^` ergibt Cu^2+^).

### Listen

Bullet-Listen werden mit vorangestellten Sternchen erstellt. Zum Beispiel ergibt die Eingabe

```markdown
* Ein Punkt in der Liste
* Ein weiterer Punkt
  * Eine Ebene eingerückt
  * Und noch ein Punkt
```

die Liste

* Ein Punkt in der Liste
* Ein weiterer Punkt
  * Eine Ebene eingerückt
  * Und noch ein Punkt

Nummerierte Listen erzeugt man entsprechend mit einer vorangestellten Zahl. Mit

```markdown
1. Ein Punkt in der Liste
1. Ein weiterer Punkt
   a. Eine Ebene eingerückt
   a. Und noch ein Punkt
```

ergibt sich die Ausgabe

1. Ein Punkt in der Liste
1. Ein weiterer Punkt
   a. Eine Ebene eingerückt
   a. Und noch ein Punkt

## R-Programmcode

### Code-Chunks

Die wichtigste Möglichkeit R-Code in Dokumente einzufügen sind Code-Chunks. Ein Code-Chunk enthält Anweisungen in der Programmiersprache R. So erzeugt etwa der Chunk

    `r chunk`{r}
    sqrt(2)
    sqrt(3)
    `r chunk`

die Ausgabe

```{r}
sqrt(2)
sqrt(3)
```

Beachten Sie, dass der Code selber nicht mit ausgegeben wird, da wir dies in dem Chunk zum R-Setup voreingestellt haben. Die Ausgabe von R-Chunks kann mit verschiedenen Optionen konfiguriert werden.

**Option zur Ausgabe**

Hinter das `r` in der ersten Zeile können Optionen zur Ausführung des Code angegeben werden. Beispielsweise gibt `echo=TRUE` an, dass der Code mit ausgegeben wird. Mit

    `r chunk`{r, echo = TRUE}
    sqrt(5)
    sqrt(6)
    `r chunk`

erhalten wir also

```{r, echo = TRUE}
sqrt(5)
sqrt(6)
```

Welche Ausgaben von den verschiedenen Optionen unterdrückt werden ist in der folgenden Tabelle zusammengefasst:

Option             | Ausführung | Anzeige | Ausgabe | Plots | Meldungen | Warnungen 
-------------------|:--------------:|:-------------:|:-------:|:-----:|:---------:|:--------:
`eval = FALSE`     | --             |               | --      | --    | --        | --
`include = FALSE`  |                | --            | --      | --    | --        | --
`echo = FALSE`     |                | --            |         |       |           |
`results = "hide"` |                |               | --      |       |           | 
`fig.show = "hide"`|                |               |         | --    |           |
`message = FALSE`  |                |               |         |       | --        |
`warning = FALSE`  |                |               |         |       |           | --

Voreingestellt ist jeweils `TRUE`.

**Optionen für Graphiken**

Darüber hinaus gibt es eine Reihe von Optionen, mit denen sich die erzeugten Graphiken angepassen lassen:

- `fig.width` und `fig.height`: Die Größe des R-Plots in Inches (2.54cm). Die Plots werden zunächst in dieser Größe erzeugt und dann auf die Abmessungen der Seite skaliert. Große Plots resultieren also in einer kleinen Schriftgröße. Alternativ lassen sich Breite und Höhe auch in einem Rutsch setzen. Das funktioniert mit `fig.dim`, zum Beispiel wird mit `fig.dim = c(6, 4)` der Plot in 6 x 4 Inches erzeugt.

- `fig.asp`: Mit diesem Wert wird das Seitenverhähltnis der Graphik angegeben. 

- `out.width`: Die Ausgabebreite von R-Plots in dem erzeugten Dokument. Der Plot wird auf die angegebenen Prozent (in Hochkommata setzen) der Textbreite skaliert. Zum Beispiel bedeuted `out.width = '80%'`, dass der Plot auf 80% der Textbreite dargestellt wird.

- `fig.align`: Die Ausrichtung des Plots, entweder `'left'`, `'center'`, oder `'right'`. Hat bei einer Breite des Plots von 100% keinen Effekt.

- `fig.cap`: Bildunterschrift.

Hier ein Beispiel mit den Optionen `fig.dim = c(3, 3)` und `out.width = '50%'`, die einen quadratischen Plot erzeugen. 

```{r, fig.dim = c(3, 3), out.width = '50%', fig.cap = "Eine Bildunterschrift"}
ggplot(data = mtcars) + geom_point(mapping = aes(x = cyl, y = mpg))
```

Dasselbe Ergebnis hätte man alternativ auch mit `fig.width = 3`, `fig.asp = 1` sowie `out.width = '50%'` erzielen können.

### Inline-Code

Programmcode in R kann mit `r inline("R-Code")` auch in den fortlaufenden Text eingebaut werden. Zum Beispiel berechnet `r inline("signif(sqrt(2), 4)")` die Wurzel der Zahl 2 und gibt das Ergebnis mit vier signifikanten Stellen aus, der Text enthält daher die Ausgabe `r signif(sqrt(2), 4)`.

Besonders praktisch ist es dabei, dass auch auf vorher definierte Variablen zugegriffen werden kann. Wird also in einem Code-Chunk ein Wert berechnet dann kann dieser später im Text ausgegeben werden. Zum Beispiel wird mit dem Code-Chunk

```{r, include = FALSE}
x <- sqrt(6)
```

    `r chunk`{r}
    x <- sqrt(6)
    `r chunk`
    
die Variable x berechnet. Dann ergibt `x = ` `r inline("x")` die Ausgabe x = `r x`. 

## Mathematische Formeln

Mathematischer Formelsatz erfolgt in der Schreibweise von LaTeX. Wird ein Ausdruck zwischen Dollarzeichen gesetzt, dann erscheint er als Formel im Text. Zum Beispiel ergibt `$M = ql^2/8$` die Ausgabe $M = ql^2/8$. Vom Text Abgesetzte Formel werden durch doppelte Dollarzeichen ausgezeichnet. Zum Beispiel liefert

```markdown
$$
M = \frac{ql^2}{8}
$$
```

die Ausgabe

$$
M = \frac{ql^2}{8}
$$

Wer die LaTeX-Schreibweise nicht kennt, kann sich auf <https://www.zahlen-kern.de/editor/> helfen lassen.

## Externe Graphiken

Eine externe Graphik können Sie folgendermaßen einbinden:

`![Bildunterschrift](Dateipfad){Darstellungsoptionen}`

Als Beispiel:

`![Golden Gate Brücke (Quelle: Wikipedia)](bilder/golden-gate.jpg){#fig-ggb width=60%}`

![Golden Gate Brücke (Quelle: Wikipedia)](bilder/golden-gate.jpg){#fig-ggb width=60%}
    
Standardmäßig werden Graphiken in ihrer tatsächlichen Größe dargestellt. Sie können mit den Darstellungsoptionen `width` und `height` die Größe anpassen. Wenn Sie, wie in unserem Beispiel, nur `width` spezifizieren wird `height`automatisch an das Seitenverhältnis angepasst. Die Standardeinheit für Graphiken sind Pixel, sie können aber sowohl Prozentangaben (in Relation zum Textoutput) als auch anderen Einheiten wie Inches verwenden.
Weiterhin ist `#fig-ggb` ein Label, das sie in der Form `@fig-ggb` verwenden, um im Text auf die Graphik zu verweisen. Hier ein Beispiel, wie das aussehen kann.

@fig-ggb zeigt die Golden Gate Brücke in San Francisco, ein bedeutendes Denkmal der Ingenieurbaukunst.

Grundsätzlich gilt die Regel: Abbildungen werden immer im Text referenziert, sonst kann man sie auch weglassen.

## Tabellen

Tabellen lassen sich aus einem Dataframe mit der Funktion `kable` erzeugen, ein Minimalbeispiel zeigt Tabelle @tbl-tabelle. Auch hier kann wieder mithilfe der Bezeichnung des R-Chunks aus dem Text auf die Tabelle verwiesen werden.

```{r}
#| label: tbl-tabelle
d <- tibble(
  A = c(1, 2, 3),
  Test = round(c(pi, exp(1), 1/3), digits = 3)
)

kable(
  d, booktabs = TRUE,
  caption = 'Eine kleine Tabelle'
)
```

Alternativ können Tabellen auch in der Markdown-Schreibweise eingefügt werden.

        Länge        Breite           Höhe        Dichte
-------------  ------------  -------------  ------------
          5.1           3.5            1.4           0.2
          4.9           3.0            1.4           0.2
          4.7           3.2            1.3           0.2
          4.6           3.1            1.5           0.2
          5.0           3.6            1.4           0.2
          5.4           3.9            1.7           0.4
          
Eine umfassende Erläuterung finden Sie in dem Buch zu Bookdown unter <https://bookdown.org/yihui/bookdown/tables.html>.

## Verweise auf Literaturstellen

Um auf Literaturstellen zu verweisen werden benötigten Veröffentlichungen in der Datei `bibliographie.bib` gesammelt (die Datei kann auch anders heißen). Es handelt sich dabei um eine Datei im BibTeX-Format (siehe <https://de.wikipedia.org/wiki/BibTeX>). Jeder Eintrag beginnt mit einer ID, zum Beispiel `fahrmeir2016` für das Statistikbuch von Fahrmeir et al. Auf die Literaturstellen kann dann im Text mit `[@ID]` verwiesen werden. Beispielsweise ergibt `[@fahrmeir2016]` den Verweis [@fahrmeir2016]. Die referenzierten Literaturstellen werden automatisch am Ende des Dokuments zusammengefasst.

# Literaturverzeichnis {-}